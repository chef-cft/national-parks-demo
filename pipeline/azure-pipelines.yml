pool: henkhaus-forest
variables:
  - group: tf-backend-sa-pipeline
stages:



# STAGE 0 Setup
- stage: Setup
  displayName: "Setup"
  condition: eq(variables.run00Setup, true)
  jobs:
  - job: SetupVariables
    displayName: "Setup Variables"
    
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(Pipeline.Workspace)/variables/national-parks-validator
      displayName: "Create Variable Store"

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          rm -rf $(Pipeline.Workspace)/variables/national-parks-validator/*
      displayName: Clean Variables

   

### STAGE 1 Deploy Automate
- stage: Deploy
  displayName: "Deploy" 
  dependsOn: Setup
  condition: eq(variables.run10Deploy, true)
  jobs:
  - job: Deploy_Automate
    displayName: "Deploy Automate"
    
    steps:
    - template: templates/agent-setup.yml

    - task: DownloadSecureFile@1
      name: tfAutomateVarsFile
      inputs:
        secureFile: 'automate-pipeline.tfvars'
      displayName: "Download: automate-pipeline.tfvars"
    
    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"
    
    - task: Bash@3  
      inputs:
        targetType: 'inline'
        script: |
                  sudo chmod 600 $(awsInstanceKey.secureFilePath)
      displayName: "Update AWS Instance Key Permissions"
    
    - task: TerraformTaskV1@0
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/chef-automate/aws'
        backendServiceAWS: 'AWS-ADO-Pipeline'
        backendAWSBucketName: '$(bucketName)'
        backendAWSKey: '$(keyAutomate)'
      displayName: "Terraform: Init"
      
    - task: TerraformTaskV1@0
      name: automateApply
      inputs:
        provider: 'aws'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/chef-automate/aws'
        commandOptions: '-var-file=$(tfAutomateVarsFile.secureFilePath) -var "aws_key_pair_file=$(awsInstanceKey.secureFilePath)"'
        environmentServiceNameAWS: 'AWS-ADO-Pipeline'
      displayName: "Terraform: Apply"
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  cat $(automateApply.jsonOutputVariablesPath) > $(Pipeline.Workspace)/variables/national-parks-validator/TF_OUTPUT_AUTOMATE
      displayName: "Terraform: Store Outputs"


  - job: Deploy_National_Parks
    dependsOn: Deploy_Automate
    displayName: "Deploy National Parks"
    
    steps:
    - template: templates/agent-setup.yml

    - task: DownloadSecureFile@1
      name: tfNatParksVarsFile
      inputs:
        secureFile: 'nat-parks-pipeline.tfvars'
      displayName: "Download: nat-parks-pipeline.tfvars"

    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  sudo chmod 600 $(awsInstanceKey.secureFilePath)
      displayName: "Update AWS Instance Key Permissions"

    - task: TerraformTaskV1@0
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: 'terraform/aws'
        backendServiceAWS: 'AWS-ADO-Pipeline'
        backendAWSBucketName: '$(bucketName)'
        backendAWSKey: '$(keyNationalParks)'
      displayName: "Terraform: Init"

    - task: TerraformTaskV1@0
      name: nationalParksApply
      inputs:
        provider: 'aws'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws'
        commandOptions: '-var-file=$(tfNatParksVarsFile.secureFilePath) -var "aws_key_pair_file=$(awsInstanceKey.secureFilePath)"'
        environmentServiceNameAWS: 'AWS-ADO-Pipeline'
      displayName: "Terraform: Apply"
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  cat $(nationalParksApply.jsonOutputVariablesPath) > $(Pipeline.Workspace)/variables/national-parks-validator/TF_OUTPUT_NATIONAL_PARKS
      displayName: "Terraform: Store Outputs"

### STAGE 2 Build RED Package(s)
- stage: Demo
  displayName: "Demo" 
  condition: eq(variables.run20Demo, true)
  dependsOn: Deploy

  jobs:

  - job: Build_Red
    displayName: "Build Red"
    
    steps:
    - template: templates/agent-setup.yml

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  sudo cp $(System.DefaultWorkingDirectory)/red-index.html $(System.DefaultWorkingDirectory)/src/main/webapp/index.html
      displayName: "Copy Red Pins"
  
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  VERSION="RED-$(Build.BuildNumber)"
                  sudo sed -i "s/^\(pkg_version\s*=\s*\).*$/\\1\"$VERSION\"/" $(System.DefaultWorkingDirectory)/habitat/plan.sh
                  cat $(System.DefaultWorkingDirectory)/habitat/plan.sh
      displayName: "Incremented Pkg Version"
    
    - task: vsts-habitat-signing-key@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        taskAction: 'install'
      displayName: "Habitat: Install Signing Origin Key"

    - task: vsts-habitat-build@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        habitatSrcPath: '$(Build.SourcesDirectory)'
        habitatPlanContext: 'habitat'
      env:
        HAB_LICENSE: accept-no-persist
      displayName: "Habitat: Build Package"

    - task: vsts-habitat-expose-habitat-build-vars@3
      inputs:
        habitatLastBuildEnvPath: '$(Build.SourcesDirectory)/results'
        habitatSetBuildNumber: true
        habitatImageNamesFilename: '$(System.DefaultWorkingDirectory)/image.names'
      displayName: "Habitat: Expose Build Variables"

    # - publish: $(System.DefaultWorkingDirectory)/results
    #   artifact: red_hart
    #   displayName: "Publish Artifact"

    - script: |
              source $(System.DefaultWorkingDirectory)/results/last_build.env
              echo "##vso[task.setvariable variable=pkg_artifact]$pkg_artifact"
      displayName: 'Publish Artifact Name'

    - task: vsts-habitat-pkg-upload@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        habitatPackagePath: '$(System.DefaultWorkingDirectory)/results/$(pkg_artifact)'
        habitatPackageChannel: 'pipeline'
      env:
        HAB_LICENSE: accept-no-persist
      displayName: "Habitat: Package Upload"
    
  - job: Test_Red
    displayName: "Test Red"
    dependsOn: Build_Red
    variables:
      a2AdminUser: null
      a2AdminPassword: null
      a2Token: null
      a2AdminToken: null
      a2Url: null
      chefAutomatePublicIp: null
      chefAutomateServerPublicR53Dns: null
      haproxyPublicIp: null
      mongodbPublicIp: null
      nationalParksPublicIp: null
      permanentPeerPublicIp: null

    steps:
    - template: templates/agent-setup.yml
    - template: templates/load-tf-outputs.yml
    
    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"
    
    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'webserver --key-files $(awsInstanceKey.secureFilePath) --target ssh://centos@$(nationalParksPublicIp) --chef-license=accept --input color=RED'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-webserver.xml'
      displayName: "InSpec: Exec Webserver Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-webserver.xml'
        testRunTitle: 'Web Server'
      displayName: "InSpec: Publish Webserver Test Results"

    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'haproxy --key-files $(awsInstanceKey.secureFilePath) --target ssh://centos@$(haproxyPublicIp) --chef-license=accept'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-haproxy.xml'
      displayName: "InSpec: Exec HAProxy Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-haproxy.xml'
        testRunTitle: 'HAProxy'
      displayName: "InSpec: Publish HAProxy Test Results"

    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'automate --key-files $(awsInstanceKey.secureFilePath) --target ssh://ubuntu@$(chefAutomatePublicIp) --input-file $(Pipeline.Workspace)/variables/national-parks-validator/a2_input_variables.yml --chef-license=accept'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-automate.xml'
      displayName: "InSpec: Exec Automate Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-automate.xml'
        testRunTitle: 'Automate'
      displayName: "InSpec: Publish Automate Test Results"

  - job: Build_Blue
    displayName: "Build Blue"
    dependsOn: Test_Red

    steps:
    - template: templates/agent-setup.yml

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  sudo cp $(System.DefaultWorkingDirectory)/blue-index.html $(System.DefaultWorkingDirectory)/src/main/webapp/index.html
      displayName: "Copy Blue Pins"

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
                  VERSION="BLUE-$(Build.BuildNumber)"
                  sudo sed -i "s/^\(pkg_version\s*=\s*\).*$/\\1\"$VERSION\"/" $(System.DefaultWorkingDirectory)/habitat/plan.sh
                  cat $(System.DefaultWorkingDirectory)/habitat/plan.sh
      displayName: "Incremented Pkg Version"




    - task: vsts-habitat-signing-key@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        taskAction: 'install'
      displayName: "Habitat: Install Signing Origin Key"

    - task: vsts-habitat-build@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        habitatSrcPath: '$(Build.SourcesDirectory)'
        habitatPlanContext: 'habitat'
      env:
        HAB_LICENSE: accept-no-persist
      displayName: "Habitat: Build Package"

    - task: vsts-habitat-expose-habitat-build-vars@3
      inputs:
        habitatLastBuildEnvPath: '$(Build.SourcesDirectory)/results'
        habitatSetBuildNumber: true
        habitatImageNamesFilename: '$(System.DefaultWorkingDirectory)/image.names'
      displayName: "Habitat: Expose Build Variables"

    # - publish: $(System.DefaultWorkingDirectory)/results
    #   artifact: blue_hart
    #   displayName: "Publish Artifact"

    - script: |
              source $(System.DefaultWorkingDirectory)/results/last_build.env
              echo "##vso[task.setvariable variable=pkg_artifact]$pkg_artifact"
      displayName: 'Publish Artifact Name'

    - task: vsts-habitat-pkg-upload@3
      inputs:
        habitatOrigin: 'Habitat-Chef-SA-Pipeline'
        habitatPackagePath: '$(System.DefaultWorkingDirectory)/results/$(pkg_artifact)'
        habitatPackageChannel: 'pipeline'
      env:
        HAB_LICENSE: accept-no-persist
      displayName: "Habitat: Package Upload"
  
  - job: Test_Blue
    displayName: "Test Blue"
    dependsOn: Build_Blue
    variables:
      a2AdminUser: null
      a2AdminPassword: null
      a2Token: null
      a2Url: null
      chefAutomatePublicIp: null
      chefAutomateServerPublicR53Dns: null
      haproxyPublicIp: null
      mongodbPublicIp: null
      nationalParksPublicIp: null
      permanentPeerPublicIp: null

    steps:
    - template: templates/agent-setup.yml
    - template: templates/load-tf-outputs.yml
    
    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"
    
    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'webserver --key-files $(awsInstanceKey.secureFilePath) --target ssh://centos@$(nationalParksPublicIp) --chef-license=accept --input color=BLUE'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-webserver.xml'
      displayName: "InSpec: Exec Webserver Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-webserver.xml'
        testRunTitle: 'Web Server'
      displayName: "InSpec: Publish Webserver Test Results"

    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'haproxy --key-files $(awsInstanceKey.secureFilePath) --target ssh://centos@$(haproxyPublicIp) --chef-license=accept'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-haproxy.xml'
      displayName: "InSpec: Exec HAProxy Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-haproxy.xml'
        testRunTitle: 'HAProxy'
      displayName: "InSpec: Publish HAProxy Test Results"

    - task: vsts-chef-task-exec-inspec@1
      continueOnError: true
      inputs:
        inspecProfilePath: '$(System.DefaultWorkingDirectory)/pipeline/inspec-tests'
        inspecArguments: 'automate --key-files $(awsInstanceKey.secureFilePath) --target ssh://ubuntu@$(chefAutomatePublicIp) --input-file $(Pipeline.Workspace)/variables/national-parks-validator/a2_input_variables.yml --chef-license=accept'
        inspecResultsFile: '$(System.DefaultWorkingDirectory)/TEST-automate.xml'
      displayName: "InSpec: Exec Automate Tests"
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-automate.xml'
        testRunTitle: 'Automate'
      displayName: "InSpec: Publish Automate Test Results"
   


### STAGE 4 Clean Up
- stage: Clean_Up
  displayName: "Clean Up"
  dependsOn: Demo
  condition: eq(variables.run30CleanUp, true)
  jobs:
  - job: Clean_Up_Automate
    dependsOn: Clean_Up_National_Parks
    displayName: "Clean Up Automate"
    
    steps:
    - template: templates/agent-setup.yml
    
    - task: DownloadSecureFile@1
      name: tfAutomateVarsFile
      inputs:
        secureFile: 'automate-pipeline.tfvars'
      displayName: "Download: automate-pipeline.tfvars"
    
    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"

    - task: TerraformTaskV1@0
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/chef-automate/aws'
        backendServiceAWS: 'AWS-ADO-Pipeline'
        backendAWSBucketName: '$(bucketName)'
        backendAWSKey: '$(keyAutomate)'
      displayName: "Terraform: Init"

    - task: TerraformTaskV1@0
      inputs:
        provider: 'aws'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/chef-automate/aws'
        commandOptions: '-var-file=$(tfAutomateVarsFile.secureFilePath) -var "aws_key_pair_file=$(awsInstanceKey.secureFilePath)"'
        environmentServiceNameAWS: 'AWS-ADO-Pipeline'
      displayName: "Terraform: Destroy"

  - job: Clean_Up_National_Parks
    displayName: "Clean Up National Parks"
    
    steps:
    
    - template: templates/agent-setup.yml
    
    - task: DownloadSecureFile@1
      name: tfNatParksVarsFile
      inputs:
        secureFile: 'nat-parks-pipeline.tfvars'
      displayName: "Download: nat-parks-pipeline.tfvars"
    
    - task: DownloadSecureFile@1
      name: awsInstanceKey
      inputs:
        secureFile: 'demo-validator-us-east-1.pem'
      displayName: "Download: AWS Instance Key"

    - task: TerraformTaskV1@0
      displayName: "Terraform: Init"
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws'
        backendServiceAWS: 'AWS-ADO-Pipeline'
        backendAWSBucketName: '$(bucketName)'
        backendAWSKey: '$(keyNationalParks)'

    - task: TerraformTaskV1@0
      inputs:
        provider: 'aws'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws'
        commandOptions: '-var-file=$(tfNatParksVarsFile.secureFilePath) -var "aws_key_pair_file=$(awsInstanceKey.secureFilePath)"'
        environmentServiceNameAWS: 'AWS-ADO-Pipeline'
      displayName: "Terraform: Destroy"